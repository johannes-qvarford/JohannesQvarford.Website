<div class="project">
    <h1>FAM</h1>
    <img class="project-image" src="~/img/Bricknode.png" />
    <div class="project-summary">
        <div class="project-summary-language">Språk: C#, Typescript, T-SQL</div>
        <div class="project-summary-period">År: 2016-2017</div>
        <div class="project-summary-group">Företag: Solutions Skövde</div>
    </div>

    <h2>Introduktion</h2>
    <p>
        Under hösten 2016 blev vi kontaktade av Bricknode som ville ha hjälp att bygga en finansiell modul för en av deras kunder.
        Tre utvecklare från Solutions Skövde incklusive mig fick i uppgift att bygga både frontend:en och backend:en av modulen.
        Modulen var delvis en utökning av Bricknode Financial System (BFS) och en frontend för kontorsarbetare att hantera finansiella tillgångar, inclusive ett specialanpassat rättighetssystem.
    </p>

    <h2>I början</h2>
    <p>
        Innan projektet började officiellt, så tog jag fram ett designdokument över vilka teknologier vi skulle använda och hur kod skulle organiseras.
        Jag gjorde det så att alla inte skulle göra saker på helt skilda sätt. Vissa val visade sig vara bra, medan andra var mindre bra.
        Designdokumentet gjorde det speciellt svårt för en av utvecklarna att arbeta, på grund av överabstraktioner i kodorganisationen.
        Eftersom endast en av programmerarna skrev frontend:en medan den andra skrev backend:en så kunde jag definitivt ha reviderat designdokumentet tidigare.
        Jag var väldigt ivrig att att använda ny teknologi, men på grund av det så stötte vi på problem som det var svårt att hitta lösningar om på internet.
    </p>

    <h2>Som en lead</h2>
    <p>
        Under projektet så fick jag i uppgift att ta hand om de andra programmerarna som lead. Det innefattade att delegera arbete, recensera kod och skriva dokumentation.
        Jag kommunicerade även direkt med våran kontaktperson på Bricknode så att jag förstod vad som behövde implementeras.
        Det fungerade ganska bra, men vad vi upptäckte under utvecklingen var att även om min roll som mediator var nödvändig vid tillfället,
        så hade det varit att föredra om alla utvecklare kunde arbeta både på frontend:en och backend:en och tala direkt till vår kontaktperson.
        Vi märkte även att arbetet på backend:en blev färdigt mycket snabbare än på frontend:en, så jag var ibland tvungen att hoppa in och fylla i läckorna.
    </p>

    <h2>Som en programmerare</h2>
    <p>
        Jag utvecklade ett antal saker själv under projektet. Efter 4 månader så avslutades vårt ursprungliga kontrakt,
        och jag var den enda från Solutions Skövde som fortsatte arbeta på projektet för att de inte hade råd med alla.
        Jag implementerade ett antal grundläggade resurshanteringssidor, inklusive en sida för att hantera en delägares ordrar.
        Jag deignade även ett litet system för att abstrahera CRUD controller klasser på backend:en för att minska ner på boilerplate och förenkla testning.
        Vi använde aspnet core på backend:en och Angular på frontend:en. Innan projektet hade jag bara lite erfarenhet med Angular, så det här projektet gav mig bättre förståelse för hur det fungerar.
    </p>

    <h2>Sammanfattning</h2>
    <p>
        Projektet fortsatte efter att vi slutade arbeta på det, och jag fick intrycket att de var nöjda med vårt arbete.
        Förutom några felsteg i det ursprungliga designdokumentet så tror jag att gjorde ett bra jobb. Bricknode måste ha tyckt så också, eftersom de ville att jag skulle fortsätta jobba på projektet.
        Det här var inte mitt första jobb som lead, men det satte i perspektiv hur viktigt det kan vara att organisera arbetsbelastningen så att ingen behöver rulla tummarna.
        Det lärde mig även att vara mer flexibel när det kommer till programmeringskonventioner, så att folk inte känner sig lika pressade att följa regler som de inte håller med.
        Jag lärde mig en hel del om Angular, och genom att använda en skarp version av dotnet core så fick det mig att inse hur viktigt det är att använda vältestad teknologi.
    </p>
</div>