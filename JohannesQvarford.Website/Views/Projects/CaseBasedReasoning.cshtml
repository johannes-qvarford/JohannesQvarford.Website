@{
    Layout = "~/Views/Shared/_Project.cshtml";
}

<div class="project">
    <h1>A Case-Based Reasoning Approach to A Chess AI Using Shallow Similarity</h1>
    <div class="project-abstract">
        <h2>Abstract</h2>
        <img src="@Url.Content("~/Content/Images/Case Based Reasoning Image.jpg")"/>
        <p>
            Chess is a game that is often used to examine different techniques in AI.
            In this thesis, the following question is asked:
            <strong>"Is it possible to develop an AI-agent whose decision making is based on the technique Case-based Reasoning (CBR) that uses shallow similarity, and plays better using case bases based on the better players?"</strong>.
            An <strong>AI-agent has been developed that has played a number of games against itself</strong> using different case bases based on different players.
            After examining the results, it turns out that the <strong>AI-agent plays so bad that it almost never manages to win</strong> regardless of case base, 
            which meant that <strong>it was not possible to grade them based on skill</strong>.
            It's could still be useful to examine if a CBR-based chess playing AI-agent could play chess with great skill.
        </p>
        <p>
            The whole report can be downloaded at <a href="http://urn.kb.se/resolve?urn=urn:nbn:se:his:diva-11049">Diva</a>
        </p>
    </div>

    <div class="project-summary">
        <div class="project-summary-language">Language: C#</div>
        <div class="project-summary-period">Year: 2015</div>
        <div class="project-summary-group">Institution: HiS</div>
    </div>

    <h2>Programming Experience</h2>
    <p>
        This project was very interesting to work with because it gave me a chance to program in a more functional style than I've previously been used to.
        <strong>Classes where made immutable,</strong> and their public interfaces were severly restricted to the bare minimum, <strong>which made it harder to write bug ridden code.</strong>
        <strong>Almost everything chess related were unit tested</strong>, and I never even ran the program before all the tests passed.
    </p>
    <p>
        While this may have been working great in the beginning, I was soon faced with a <strong>performance problem</strong>, mostly related to unnessesary and expensive allocations of lists and boards.
        In order to fix the problem, I <strong>changed the representation and implementation of some classes without changing their public interfaces</strong>.
        This allowed me to test any changes I made, to make sure that I didn't introduce a bug.
    </p>
    <p>
        So, in the end <strong>I had introduced mutability</strong> in order to solve the problem.
        However, that doesn't mean that it was a waste of time to program functionally at the start.
        <ul>
            <li>The immutability caused the class interfaces to shrink, <strong>which sped up the initial testing process</strong>.</li>
            <li>Even if the initial implementation and representations where replaced, they were quick to develop, and <strong>led to clearer code</strong>.</li>
            <li>Due to the non-existance of state-sharing, it was <strong>easy to scale the program</strong> to simulate multiple chess games in parallell using PLINQ.</li>
        </ul>
        In the end, this experience has lead me to <strong>develop in a more functional style</strong>, and writing more unit tests.
        Unfortunatly, sometimes the pros aren't worth it on short projects with rapidly changing requirements.
    </p>
</div>
