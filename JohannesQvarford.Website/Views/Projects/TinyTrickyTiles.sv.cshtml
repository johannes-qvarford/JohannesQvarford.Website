@{
    Layout = "~/Views/Shared/_Project.sv.cshtml";
}

@section Styles {
    @Styles.Render("~/Content/tiny-tricky-tiles.css")
}

<div class="project">
    <h1>Tiny Tricky Tiles</h1>
    <img class="project-image" src="~/Content/Images/TinyTrickyTilesBig.png"/>
    <div class="project-summary">
        <div class="project-summary-language">Språk: C#</div>
        <div class="project-summary-period">År: 2014-2015</div>
        <div class="project-summary-group">Företag: Solutions Skövde</div>
    </div>

    <h2>Introduktion</h2>
    <p>
        Tiny Tricky Tiles är ett unikt pusselspel som förlitar sig på spelarens mönsterigenkänningsförmågor.
        Det utvecklades av Solutions Skövde, vilket var känt som Deedly Games vid det tillfället. Gruppen bestod
        av mig som programmerare, <a href="https://www.linkedin.com/profile/view?id=AC4AAAaTp8YBq1dBsESX9rpswYfeew0y2NJSDLs&authType=name&authToken=C7dL&trk=contacts-contacts-list-contact_name-0">Helena Granström</a> som grafiker
        och Alexander Karlsson som programmerare/designer.
        Vi utvecklade spelet under ett år på våran fritid med hjälp av Unity medan vi studerade på HiS.
        Spelet går att ladda ner på <a href="https://play.google.com/store/apps/details?id=com.DeedlyGames.TinyTrickyTiles">Google Play</a> och <a href="https://itunes.apple.com/se/app/tiny-tricky-tiles/id966125107?mt=8">App Store</a>.
    </p>

    <h2>Regler</h2>
    <p>
        Varje pussel består av en rektangulärt spelbräde med en grupp block uppstaplade i olika färger.
        Spelaren får ett reservblock, som hen kan "knuffa" in på brädet genom en given rad eller kolumn.
        Blocket som knuffades ur brädet blir det nya reservblocket. Spelaren vinner när alla block
        på brädet har kopplats ihop till alla andra block av samma färg som en "blobb". Nedan visas ett antal exempel av giltiga vinstlägen:
    </p>
    <div class="game-states">
        <div class="game-state">
            ooo xx. ..x<br />
            xxx xo. ...<br />
            ... xo. ooo 
        </div>
        <br/>
        ... och här är några ogiltiga:
        <br/><br/>
        <div class="game-state">
            oox oox ooo<br />
            xxx xx. oxx<br />
            ..o ... xxo<br /> 
        </div>
    </div>

    <h2>Programmeringsutmaningar</h2>
    <p>
        Jag gick med i Solutions Skövde när gruppen nästan var klart med ett annat spel, vid namn Trashmania.
        Vad som stack ut när jag kollade igenom koden var att det inte fanns någon klar <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">Separation of Concerns</a> (inkapsling).
        mellan spelkomponenterna. Det fanns ett stort gudsobjekt som hanterade några aspekter av spelet, men det fanns även
        många små komponenter. Gudsobjektet manipulerade inte bara de små komponenternas state direkt, men de små komponenterna manipulerade även
        guddsobjektets state. Det var oklart var ny funktionalitet skulle introduceras and det var svårt att förstå exekveringsflödet i spelet.
        <br/>
        Ett annat problem var att ingenting i spelet var enhetstestat, vilket innebar att nya features nästan alltid introducerade många buggar.
    </p>

    <p>
        När vi började att arbeta med Tiny Tricky Tiles så ville jag undvika misstagen som utfördes under utvecklingen av Trashmania.
        Jag hade läst en hel del om <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-View-Controller</a> (modell-vy-kontroll) arkitekturen
        och hur den kunde användas för SoC och hur <a href="https://en.wikipedia.org/wiki/Inversion_of_control">Inversion of Control</a>
        skulle kunna användas för att enkelt testa komponenter.
        StrangeIoC var en IoC behållare med stöd för MVC i Unity, vilket innebar att jag kunde slå två flugor i en smäll.
    </p>

    <p>
        StrangeIoC's IoC stöd var helt bortkopplat från Unity, vilket skulle underlätta för att testa komponenter.
        Spellogic utfördes av kommandon, vilket liknade kontroller i MVC. Kommandon kunde kedjas i sekvens och köras paralellt
        och om en länk misslyckas med ett error så avbröts hela kedjan.
        Kommandon avlossades som respons av höjda signaler från vyer, vilket var View komponenter som tillhörde Unity spelobject.
        Kommandon propagerade ändringar genom mutationer på delade "injectade" komponenter och genom höjda signaler.
    </p>

    <h2>Result</h2>
    <p>
        StrangeIoC var mycket till hjälp genom hela projektet - bara möjligheten att separera spelets logiska state
        till modellerna och vyernas state till View komponenterna gjorde koden mycket enklare att greppa för mig.
        All logisk state i spelet separerades inte ut ur View komponenterna dock, och Unity-relaterad kod placerades
        in kommandon vilket gjorde det omöjligt att testa dem.
        Inte för att det spelade någon roll, för i slutändan så enhetstestade vi ingenting.
        En anledning till att vi inte testade var att mycket av spellogiken rådde över att manipulera spelobjekt,
        och det var för tidskonsumerande att "mocka" en stor del av Unity's funktionalitet.
        En annan anledning var att det skulle vara väldigt tidskrävande att skriva tester, och eftersom specen ändrades
        så frekvent så skulle de mesta av testkoden bli utdaterat väldigt snabbt.

    </p>

    <p>
        Separationen av modeller, vyer och kommandon må ha separerat ansvar mer,
        men det gjorde även att projektet svällde upp med kodfiler, gjorde beroenden svårare att upptäcka
        och gjorde kontrollflödet svårare att förstå.
        När man vanligtvis behöver skapa en spelkomponent i Unity, låt säga för en fladdermus, så behöver man ofta bara skapa
        en "BatBehaviour" klass som ärver ifrån MonoBehaviour, och sedan attacha den till ett fladdermusspelobjekt.
        Med StrangeIoC så behövde man skapa en BatView som hanterar Unity callbacks för
        kollisioner, uppdatering och interaktion med Unitys API.
        Denna View ska sedan kopplas till en BatMediator, som uppdaterar BatView baserat på ändringar i modeller,
        och ändrar modellerna när BatView reagerar på någonting, antingen genom mutation av injectade modeller eller genom att höja signaler.
        Det kan behövas modeller för att hantera fladdermusens logiska state, och signalklasser för olika saker som fladdermusen kan göra eller reagera på.
        Till sist så måste alla dessa delar bindas ihop i en ständigt växande IoC behållare.
        Det krävs minst två gånger så många filer gentemot att implementera en traditionellt Unity-komponent,
        och säkert minns dubbelt så mycket kod.
        Det är svårt att få en helhet över vad fladdermusen kan göra för att de flesta av klasserna är löst kopplade
        med hjälp av signaler.
    </p>

    <p>
        Jag trodde att StrangeIoC skulle lösa en stor del av våra problem, men jag hade huvudet bland molnen
        under utvecklingen och hoppades bara att det skulle fungera.
        Jag tänkte inte på hur Alexander kände sig;
        han förstod inte vilka roller som de olika sorters komponenterna spelade
        och tyckte att ramverket var onödigt komplicerat.
    </p>

    <h2>Slutsats</h2>
    <p>
        Teorierna bakom MVC och enhetstesting är användbara i sig, men visade sig inte vara av mycket användning under
        utvecklingen av Tiny Tricky Tiles.
        Ramverket StrangeIoC var för tungviktat och gjorde att koden fick ett lågt signal-brusförhållade.
        Att förflytta spellogik från Unity Monobehaviours kan fortfarande vara användbart, och jag tror att vi kan dra
        nytta av en <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel">Model-View-ViewModel</a>
        separation, där vissa MonoBehaviours bara innehåller vy-state, vissa innehåller vy-relaterad logik medan modellerna
        innehåller vyoberoende-state och logik.
        Det skulle inte hjälpa med IoC och enhetstestning, men jag tror inte att vi kommer utföra mycket enhetstestning på spel i framtiden.
    </p>
</div>